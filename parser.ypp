%{
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <map>
#include "naredba.hpp"
#include <vector>
#include "codegen.hpp"


using namespace std;

 void yyerror(string s) {
   cerr << s << endl;
   exit(EXIT_FAILURE);
 }

 extern int yylex();

 extern map<string, char> tablica;
 
 extern "C" int print_int(int x) {
    printf("%d\n", x);
    return 0;
  }
 extern "C" int print_l(char x) {
    printf("%s\n", x ? "true" : "false");
    return 0;
 }
 Naredba *mm;
 
%}

%union {
  string *s;
  int x;
  Naredba* n;
  Izraz *i;
  vector<Naredba*> *v;
}

%token begin_token end_token if_token then_token else_token write_token write_b_token while_token do_token int_type_token bool_type_token var_token 
%token and_token or_token xor_token not_token true_token false_token

%token <s> str_token n_id_token i_id_token b_id_token
%token <x> num_token


%type <i> Izraz LIzraz
%type <n> Naredba Blok Inicijalizacija Pocetak
%type <v> NizNaredbi NizInicijalizacija


%nonassoc ':'
%nonassoc else_token
%left and_token or_token
%nonassoc not_token
%left '&' '|'
%nonassoc '~'
%left '<' '>'
%left '+' '-'
%left '*' '/' mod_token
%nonassoc UMINUS

%%
Program: Pocetak Blok '.' {
	vector<Naredba*> *pomb = new vector<Naredba*>();
	pomb->push_back($1);
	pomb->push_back($2);
	mm = new Blok(*pomb);
}
| Blok '.' {
	mm = $1;
}
;

Pocetak: var_token NizInicijalizacija ';' {
	$$ = new Blok(*$2);
	delete $2;
};

NizInicijalizacija: NizInicijalizacija ';' Inicijalizacija{
	$$ = $1;
	$$->push_back($3);
}
| Inicijalizacija {
	$$ = new vector<Naredba*>();
	$$->push_back($1);
}
;

Inicijalizacija: n_id_token ':' int_type_token {
	tablica[*$1] = 1;
	$$ = new Inicijalizacija(*$1);
}
|	n_id_token ':' int_type_token '=' Izraz{
	tablica[*$1] = 1;
	$$ = new InicijalizacijaSaDodelom(*$1, $5);
}
|   n_id_token ':' bool_type_token {
	tablica[*$1] = 0;
	$$ = new BInicijalizacija(*$1);
}
|	n_id_token ':' bool_type_token '=' LIzraz{
	tablica[*$1] = 0;
	$$ = new BInicijalizacijaSaDodelom(*$1, $5);
}
;

Blok: begin_token NizNaredbi end_token {
  $$ = new Blok(*$2);
  delete $2;
 }
;

NizNaredbi: NizNaredbi ';' Naredba {
  $$ = $1;
  $$->push_back($3);
 }
|  Naredba {
  $$ = new vector<Naredba*>();
  $$->push_back($1);
 }
;

Naredba:  write_token '(' Izraz ')' {
  $$ = new IspisIzraza($3);
  delete $3;
 }
| write_token '(' LIzraz ')' {
  $$ = new IspisLIzraza($3);
  delete $3;
 }
|  i_id_token ':' '=' Izraz  {
  $$ = new Dodela(*$1, $4);
  delete $1;
  delete $4;
 }
|  b_id_token ':' '=' LIzraz  {
  $$ = new BDodela(*$1, $4);
  delete $1;
  delete $4;
 }
| if_token LIzraz then_token ':' Naredba {
  $$ = new NaredbaIfThen($2, $5);
  delete $2;
 }
| if_token LIzraz then_token ':' Naredba else_token ':' Naredba  {
  $$ = new NaredbaIfThenElse($2, $5, $8);
  delete $2;
 }
| while_token LIzraz do_token ':' Naredba {
  $$ = new NaredbaWhile($2, $5);
  delete $2;
 }
| Blok {
  $$ = $1;
  }
;

Izraz: Izraz '+' Izraz  {
  $$ = new Zbir($1, $3);
  delete $1;
  delete $3;
 }
|  Izraz '-' Izraz {
  $$ = new Razlika($1, $3);
  delete $1;
  delete $3;
 }
|  Izraz '*' Izraz {
  $$ = new Proizvod($1, $3);
  delete $1;
  delete $3;
 }
|  Izraz '/' Izraz {
  $$ = new Kolicnik($1, $3);
  delete $1;
  delete $3;
 }
|  Izraz mod_token Izraz {
  $$ = new Mod($1, $3);
  delete $1;
  delete $3;
 }
|  '-' Izraz %prec UMINUS{
  $$ = new Minus($2);
 }
|  Izraz '&' Izraz {
  $$ = new IzrazAnd($1, $3);
  delete $1;
  delete $3;
}
|  Izraz '|' Izraz {
  $$ = new IzrazOr($1, $3);
  delete $1;
  delete $3;
}
|  '~' Izraz {
  $$ = new IzrazNot($2);

}
| '(' Izraz ')' {
  $$ = $2;
 }
|  num_token {
  $$ = new Konstanta($1);
 }
| i_id_token {
  $$ = new Promenljiva(*$1);
  delete $1;
 }
;

LIzraz: Izraz '<' Izraz {
  $$ = new Manje($1, $3);
  delete $1;
  delete $3;
 }
|  Izraz '>' Izraz {
  $$ = new Vece($1, $3);
  delete $1;
  delete $3;
 }
|  LIzraz and_token LIzraz {
  $$ = new IzrazAnd($1, $3);
  delete $1;
  delete $3;
}
|  LIzraz or_token LIzraz {
  $$ = new IzrazOr($1, $3);
  delete $1;
  delete $3;
}
|  not_token LIzraz {
  $$ = new IzrazNot($2);

}
| '(' LIzraz ')' {
  $$ = $2;
}
| b_id_token {
  $$ = new BPromenljiva(*$1);
  delete $1;
}
| true_token{
  $$ = new TrueKonstanta();
}
| false_token{
  $$ = new FalseKonstanta();
}
;
%%

extern FILE* yyin;

int main(int argc, char **argv) {
	
	initializeModuleAndPassManager();
	
	if (argc != 2)
	yyerror("Poziv programa: pseudokod paskal_fajl");
	yyin = fopen(argv[1], "r");
	if (yyin == NULL)
	yyerror("Nemoguce otvaranje fajla sa paskal kodom");

	/* Inicijalizacija */
	InitializeNativeTarget();
	InitializeNativeTargetAsmPrinter();
	InitializeNativeTargetAsmParser();  

	/* Parsiranje */
	yyparse();

	/* Pravljenje main() fj-e bez argumenata */
	vector<Type*> v(0);
	/* koja vraca int */
	FunctionType* fp = FunctionType::get(Type::getInt32Ty(theContext), v, false);
	m = Function::Create(fp, Function::ExternalLinkage, "main", TheModule);
	BasicBlock *bb = BasicBlock::Create(theContext, "entry", m);
	builder.SetInsertPoint(bb);
	mm -> codegen();
	/* i vraca 0 */
	builder.CreateRet(ConstantInt::get(theContext, APInt(32, 0)));
	verifyFunction(*m);

	/* ispis llvm koda */
	TheModule->dump();
	delete mm;

	fclose(yyin);

	return 0;
}
